# yaml-language-server: $schema=https://json.schemastore.org/github-workflow

name: "Integrate"

on:
  schedule:
    - cron: "0 10 * * *"
  pull_request: null
  push:
    branches:
      - "main"
  # Add [skip ci] to commit message to skip CI.

permissions: {}

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  byte_level:
    name: "0️⃣ Byte-level"
    runs-on: "ubuntu-22.04"
    steps:
      - name: "Checkout code"
        uses: "actions/checkout@v3"

      - name: "Check file permissions"
        run: |
          test "$(find . -type f -not -path './.git/*' -executable)" = ""

      - name: "Find non-printable ASCII characters"
        run: |
          ! LC_ALL=C.UTF-8 find . -type f -name '*.php' -print0 | xargs --null -- grep --perl-regexp --with-filename --line-number '[^ -~]'

  syntax_errors:
    name: "1️⃣ Syntax errors"
    runs-on: "ubuntu-22.04"
    steps:
      - name: "Set up PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "8.0"
          coverage: "none"

      - name: "Checkout code"
        uses: "actions/checkout@v3"

      - name: "Install dependencies"
        uses: "ramsey/composer-install@v2"
        with:
          dependency-versions: "highest"

      - name: "Check source code for syntax errors"
        run: "composer run lint"

  unit_tests:
    name: "2️⃣ Unit and functional tests"
    needs:
      - "byte_level"
      - "syntax_errors"
    strategy:
      fail-fast: false
      matrix:
        php-version:
          - "8.0"
          - "8.1"
          - "8.2"
        dependencies:
          - "lowest"
          - "locked"
          - "highest"
    runs-on: "ubuntu-22.04"
    steps:
      - name: "Set up PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "${{ matrix.php-version }}"

      - name: "Checkout code"
        uses: "actions/checkout@v3"

      - name: "Install dependencies"
        uses: "ramsey/composer-install@v2"
        with:
          dependency-versions: "${{ matrix.dependencies }}"

      - name: "Execute unit tests"
        run: "composer exec -- phpunit -v || echo 'No unit tests yet :('"

#      - name: "Send coverage to Coveralls"
#        env:
#          COVERALLS_REPO_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
#        if: "${{ env.COVERALLS_REPO_TOKEN && matrix.php-version == '8.0' && matrix.dependencies == 'highest' }}"
#        run: |
#          wget "https://github.com/php-coveralls/php-coveralls/releases/download/v2.5.3/php-coveralls.phar"
#          php ./php-coveralls.phar -v

  static_analysis:
    name: "3️⃣ Static Analysis"
    needs:
      - "byte_level"
      - "syntax_errors"
    runs-on: "ubuntu-22.04"
    steps:
      - name: "Set up PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "8.0"
          coverage: "none"

      - name: "Checkout code"
        uses: "actions/checkout@v3"

      - name: "Validate Composer configuration"
        run: "composer validate --no-interaction --strict"

      - name: "Install dependencies"
        uses: "ramsey/composer-install@v2"
        with:
          dependency-versions: "highest"

      - name: "Check PSR-4 mapping"
        run: "composer dump-autoload --no-interaction --optimize --strict-psr"

      - name: "Perform static analysis (PHPStan)"
        run: "composer run phpstan"

      - name: "Perform static analysis (Psalm)"
        run: "composer run psalm"

  coding_standards:
    name: "4️⃣ Coding Standards"
    needs:
      - "byte_level"
      - "syntax_errors"
    runs-on: "ubuntu-22.04"
    steps:
      - name: "Set up PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "8.0"
          coverage: "none"

      - name: "Checkout code"
        uses: "actions/checkout@v3"

      - name: "Check EditorConfig configuration"
        run: "test -f .editorconfig"

      - name: "Check adherence to EditorConfig"
        uses: "greut/eclint-action@v0"

      - name: "Install dependencies"
        uses: "ramsey/composer-install@v2"
        with:
          dependency-versions: "highest"

      - name: "Check coding style"
        run: "composer run cs"

  exported_files:
    name: "5️⃣ Exported files"
    needs:
      - "byte_level"
      - "syntax_errors"
    runs-on: "ubuntu-22.04"
    steps:
      - name: "Checkout code"
        uses: "actions/checkout@v3"

      - name: "Check exported files"
        run: |
          EXPECTED="LICENSE.md,README.md,composer.json"
          CURRENT="$(git archive HEAD | tar --list --exclude="src" --exclude="src/*" | paste --serial --delimiters=",")"
          echo "CURRENT =${CURRENT}"
          echo "EXPECTED=${EXPECTED}"
          test "${CURRENT}" = "${EXPECTED}"
